localhost:4200 says
Http failure during parsing for http://localhost:8080...

## DELETE HTTP Request

### Frontend: 

It was necessary to again initialize Person[] array after delete request, I guess... It works now, idk

<pre>
public persons = model.required<Person[]>();

public onDelete(document_id: string): void {
    const subs = this.personsService.deletePerson(document_id).subscribe({
      next: (value) => {  },
      error: (error) => { alert(error.message); },
      complete: () => {
        console.log('Deleted person with ' + document_id + ' id!');

        const subs2 =this.personsService.getPersons().subscribe({
          next: (values) => {
            for (let i = 0; i < values.length; i++)
              if (values.at(i) === null) {
                values.pop();
              }
            this.persons.set(values);
          },
          error: (error) => console.log(error.message),
          complete: () => { }
        });
       this.destroyRef.onDestroy(() => {subs2.unsubscribe()});

     }
});
</pre>

### Backend:

Delete http request DID NOT return the appropriate response.

Use `ResponseEntity` when returning in method!

- Service:
<pre>
public ResponseEntity<String> deletePerson(String document_id) throws ExecutionException, InterruptedException {

        if (getPerson(document_id) == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("{\"message\": \"Person with " + document_id + " id not found\"}");
        }

        ApiFuture<WriteResult> writeResult = dbFirestore.collection("crud_person").document(document_id).delete();

        return ResponseEntity.ok("{\"message\": \"Person with "+document_id+" id deleted successfully\"}");
    }
</pre>

- Controller:
<pre>
@DeleteMapping("/delete")
    public ResponseEntity<String> deletePerson(@RequestParam String document_id) throws InterruptedException, ExecutionException {
        return personService.deletePerson(document_id);
    }
</pre>

## POST HTTP Request:


## PUT HTPP Request:


